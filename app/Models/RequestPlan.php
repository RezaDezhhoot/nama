<?php

namespace App\Models;

use App\Enums\RequestPlanStatus;
use App\Enums\RequestPlanVersion;
use App\Enums\RequestStatus;
use App\Enums\RequestStep;
use App\Enums\UnitType;
use App\Traits\SimpleSearchable;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\SoftDeletes;

class RequestPlan extends Model
{
    use SoftDeletes , SimpleSearchable;

    public array $searchAbleColumns = ['title','max_number_people_supported','support_for_each_person_amount','body'];

    protected $guarded = ['id'];

    protected $casts = [
        'status' => RequestPlanStatus::class,
        'bold' => 'boolean',
        'version' => RequestPlanVersion::class,
        'letter_required' => 'boolean',
        'letter2_required' => 'boolean',
    ];

    protected static function booted()
    {
        parent::booted(); // TODO: Change the autogenerated stub
        static::addGlobalScope('pre' , function (Builder $builder) {
            $builder->withCount(['requests' => function ($q) {
                return $q->where('user_id' , auth()->id());
            }]);
        });
        static::addGlobalScope('requirements' , function (Builder $builder) {
            $builder->withCount(['requests AS completed_cycle' => function ($q) {
                return $q->where('status',RequestStatus::DONE->value)->where('user_id' , auth()->id())->whereHas('report' , function ($q) {
                    $q->where('status' , RequestStatus::DONE->value);
                });
            }]);
        });
    }

    public function scopePublished(Builder $builder): Builder
    {
        return $builder->where('status' , RequestPlanStatus::PUBLISHED);
    }

    public function scopeComingSoon(Builder $builder): Builder
    {
        return $builder->where('status' , RequestPlanStatus::COMING_SOON);
    }

    public function requests(): HasMany
    {
        return $this->hasMany(Request::class,'request_plan_id');
    }

    public function isActive(): bool
    {
        return sizeof($this->requirements->filter(fn ($v) => $v->completed_cycle == 0 )) == 0;
    }


    public function item(): BelongsTo
    {
        return $this->belongsTo(DashboardItem::class,'item_id');
    }

    public function scopeSelect2($q)
    {
        return $q->selectRaw("CONCAT(id,'-> ',title) as text , id");
    }

    public function requirements(): BelongsToMany
    {
        return $this->belongsToMany(self::class,'request_plan_requirements','request_plan_id','requirement_id');
    }
}
